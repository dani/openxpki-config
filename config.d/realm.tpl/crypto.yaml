#Sample Mockup Config for Token config of a single realm
# The left side are fixed aliases used in the code, the right side
# are aribtrary chosen names, referencing the tokens below.
type:
  certsign: ca-signer
  datasafe: vault
  scep: scep

# The actual token setup, based on current token.xml
token:
  default:
    backend: OpenXPKI::Crypto::Backend::OpenSSL

    # Template to create key, available vars are
    # ALIAS (ca-signer-1), GROUP (ca-signer), GENERATION (1)
    key: /etc/openxpki/ca/[% PKI_REALM %]/[% ALIAS %].pem

    # possible values are OpenSSL, nCipher, LunaCA
    engine: OpenSSL
    engine_section: ''
    engine_usage: ''
    key_store: OPENXPKI

    # OpenSSL binary location
    shell: /usr/bin/openssl

    # OpenSSL binary call gets wrapped with this command
    wrapper: ''

    # random file to use for OpenSSL
    randfile: /var/openxpki/rand

    # Default value for import, recorded in database, can be overriden
    secret: default

  ca-signer:
    inherit: default

  vault:
    inherit: default
    key: /etc/openxpki/ca/[% ALIAS %].pem

  scep:
    inherit: default
    backend: OpenXPKI::Crypto::Tool::LibSCEP

  # A different scep token for another scep server, served from datapool
  #scep-altra:
  #  inherit: ca-scep
  #  key_store: DATAPOOL
  #  key: "[% ALIAS %]"

# Define the secret groups
secret:
  default:
    label: Default secret group of this realm
    export: 0
    method: literal
    value: root

    # if you want to enter the password after startup via the Webui
    # replace method and value aboev with this block, kcv is optional 
    # but highly recommended as wrong passwords let the engine crash
    # you can generate the kcv with "openxpkiadm hashpwd -s argon2"
    #method: plain
    #cache: daemon
    #kcv: $argon2id$v=19$m=32768,t=3,p=1$R1VmZC9sQVJTdE05WDRReDBIMTlDUT09$KXsh6Ow1A9mIZtyAP2TXbA
